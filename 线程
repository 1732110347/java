新建状态:
使用 new 关键字和 Thread 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 start() 这个线程。

就绪状态:
当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。

运行状态:
如果就绪状态的线程获取 CPU 资源，就可以执行 run()，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。

阻塞状态:
如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种：

等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。

同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。

其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I/O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态。

死亡状态:
一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。


线程的创建：
（1）通过继承Thread类创建线程。
① 定义Thread类的一个子类
public class MyThread extends Thread{ ... }
② 定义子类中的run( )方法，覆盖父类的run( )方法
public void run() { ... } 
③ 创建该子类的一个线程对象
  MyThread thread1 = new MyThread();
④ 通过start( )方法启动线程。
 thread1.start();


（2）通过向Thread()构造方法传递Runnable对象来创建线程。
① 定义一个实现Runnable接口的类
public class MyRunnable implements Runnable{ ... }
② 在该类中实现Runnable接口中定义的run( )方法
public void run() { ... } 
③ 创建该类的一个对象，并将该对象作为实参，传递给Thread类的构造函数，从而生成一个Thread类的对象。  
MyRunnable testRunnable = new MyRunnable();
 Thread testThread = new Thread(testRunnable); 
④ 通过start( )方法启动线程。

每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。
Java 线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。
默认情况下，每一个线程都会分配一个优先级 NORM_PRIORITY（5）。
具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源。但是，线程优先级不能保证线程执行的顺序，而且非常依赖于平台。



常用方法：
void start() 
 使该线程开始执行；Java 虚拟机调用该线程的 run 方法。 
static void sleep(long millis) 
在指定的毫秒数内让当前正在执行的线程休眠（暂停执行）。
long getId() 
 返回该线程的标识符。 
String getName()  
返回该线程的名称。 
void interrupt()
中断线程。 

常用方法：
static boolean interrupted() 
测试当前线程是否已经中断。 
boolean isAlive() 进入死亡前true 后false
测试线程是否处于活动状态。
void setName(String name) 
改变线程名称，使之与参数 name 相同。
static void yield() 
暂停当前正在执行的线程对象（让当前线程放弃自己的CPU资源），并执行其他线程。
currentThread()返回当前正在使用cpu的线程

InterruptedException异常从字面意思上就是中断异常

synchronized关键字的使用：
① synchronized方法
synchronized void method() { }
② synchronized代码片段
void method() {
      synchronized{  //代码段里面操作功能信息    } 
}
③ synchronized 对象
void method() {
              synchronized(this) { }
}




















































































