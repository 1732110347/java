
public int nextInt(int n)
var rand = new Random();
rand.nextInt(200);//返回一个0 ≤ n ≤200的随机数。
给定一个参数n，nextInt(n)将返回一个大于等于0小于n的随机数，即：0 <= nextInt(n) < n。


Random ran2 = new Random(10);
System.out.println("使用另一个种子为10的Random对象生成[0,10)内随机整数序列: ");

toString()强行转为string类型

intValue()是把Integer对象类型变成int的基础数据类型； 

currentTimeMillis()程序运行所需要时间



9 组件及事件处理

JFrame构造方法：
JFrame()  ：创建无标题窗口。
JFrame(String s) ： 创建标题名字是字符串s的窗口。
例如：JFrame  f = new JFrame("Hello");
setDefaultCloseOperation方法：
设置单击窗口上的关闭按钮时的事件处理方式。
JFrame.DO_NOTHING_ON_CLOSE什么都不做
JFrame.HIDE_ON_CLOSE隐藏当前窗口
JFrame.DISPOSE_ON_CLOSE隐藏当前窗口，并释放窗口占有的其他资源
JFrame.EXIT_ON_CLOSE结束窗口所在的应用程序

public void setBounds(int x,int y,int w,int h)	以(x,y)为对象的左上角，以w为宽，以h为高设置对象的显示区域 
public void setResizable(boolean b)	设置是否可以调整大小
public void setSize(int width,int height)	设置对象的大小
public void  dispose()	撤销窗口，释放资源
public void setLayout(LayoutManager mgr) 	设置窗口的布局管理器
public void setVisible(boolean b)	设置组件是否显示
public void setLocation(int x,int y)	设置组件显示位置的左上角坐标为(x,y)
public Component add(Component comp) 	添加组件
public void setMenuBar(MenuBar mb) 	设置菜单栏
public void validate() 	再次布置窗口上面的组件（刷新）
public void setBackground(Color c)	设置对象的背景色为c 
public void  setLocationRelativeTo(Component c)	设置窗口的相对于组件的位置，c为null时，表示放在屏幕中央
public void setFont(Font font)	设置对象的字体样式为font
public void setContentPane(Container c)	设置窗口的内容面板
public String getName()	返回对象的名称
Public void setTitle(String s)	设置窗口的标题


10输入输出

1)  File(String filename);
 参数filename指明了文件名，文件名可以是完整文件名（目录+文件名），也可以是相对文件名，也可以是目录。
 例如： 
File f1 = new File(“1.txt”);   //只有文件名，在当前项目路径下。
File f2 = new File(“D:\\Java”);  //目录
File f3 = new File(“D:/Java/1.txt”); //两个反斜杠和正斜杠都可以

2) File(String directoryPath, String filename);
 directoryPath是目录路径（父目录），filename可包含目录和文件名（相对于父目录的文件或目录）。
例如： 
File f1 = new File("D:\\Java", "1.txt"); //D盘Java目录里面的1.txt文件
File f2 = new File("D:\\Java", "src"); //D盘Java目录里面的src目录

3) File(File file, String filename);
 file是一个文件对象（父目录），filename可包含目录和文件名（相对于父目录的文件或目录）。
例如： 
File f1 = new File("D:\\Java"); //D盘Java目录
File f2 = new File(f1, "src"); //D盘Java目录里面的src目录
File f3 = new File(f1, "1.txt"); //D盘Java目录里面的1.txt文件

File类提供方法，获取文件的属性：
public String getName() 获取文件的名字。
public boolean canRead() 判断文件是否是可读的。
public boolean canWrite() 判断文件是否可被写入。
public boolean exits() 判断文件是否存在。
public long length() 获取文件的长度（单位是字节）。
public String getAbsolutePath() 获取文件的绝对路径。
public String getParent() 获取文件的父目录。
public boolean isFile() 判断文件是否是一个普通文件，而不是目录。
public boolean isDirectroy() 判断文件是否是一个目录。
public boolean isHidden() 判断文件是否是隐藏文件。
public long lastModified() 获取文件最后修改的时间。

createNewFile()返回boolean，表示是否创建文件成功

file.delete()返回boolean，表示删除文件成功

f.exists() 返回boolean，表示文件是否存在

1．创建目录： public boolean mkdir() 如果创建成功返回true 如果失败返回false 如果目录已经存在返回false
2．列出目录中的文件 
public String[] list() 用字符串形式返回目录下的全部文件。
public File [] listFiles() 用File对象形式返回目录下的全部文件。 
public String[] list(FilenameFilter obj) 用字符串形式返回目录下的指定类型的所有文件。
public File [] listFiles(FilenameFilter obj) 用File对象形式返回目录下的指定类型所有文件。
上述两方法的参数FilenameFilter是一个接口，该接口有一个方法：
public boolean accept(File dir,String name); 判断目录下的文件是否需要被列出。

1）用Runtime 类的getRuntime()静态方法创建一个Runtime对象：
例如：Runtime ec=Runtime.getRuntime();
	2） 通过Runtime对象调用exec(String command)方法打开本地机的可执行文件或执行一个操作。
例如：ec.exec(Notepad.exe);


(1) 构造输入流对象，设定输入流的源
 使用FileInputStream类的下列构造方法创建指向文件的输入流。
FileInputStream(String name);
FileInputStream(File fileobj); 
其中：参数name或者fileobj指定的文件称为输入流的源。
如果输入流指向的文件不存在，则会抛出IOException。
FileInputStream in=new FileInputStream("hellow.txt");创建指向文件xx的输入流

File f=new File("hellw.txt");指定输入流的源
FileInputStream in=new FileInputStream(f);创建指向源的输入流


(2) 使用输入流对象，读取字节
可以调用从父类继承的read方法顺序地从文件中读取数据
int read() 
读取单个字节的数据，返回字节值（0~255整数），如果未读出字节就返回-1。
int read(byte b[]) 
读取b.length个字节到字节数组b中，返回实际读取的字节数。如果到达文件的末尾，则返回-1。
int read(byte b[], int off, int len) 
读取len个字节到字节数组b中，从下标为off的位置开始存放。并返回实际读取的字节数目。如果到达文件的末尾，则返回-1。
只要不关闭流，每次调用read方法就顺序地读取文件中的其余内容，直到文件的末尾或文件字节输入流被关闭。

(3) 关闭流
    void close()
关闭输入流，并释放任何与该流有关的资源。


(1) 构造输出流对象，设定输出流的目的地
 使用FileOutputStream类的下列构造方法创建指向文件的输出流。
FileOutputStream(String name);
FileOutputStream(File file);
FileOutputStream(String filepath , boolean append) 
FileOutputStream (File fileobj , boolean append) 
其中：参数name或者file指定的文件称为输出流的目的地。
如果文件不存在，则会创建该文件；如果文件存在，则会根据append是否为false(没有append参数则认为是false)，来决定是否刷新文件（重置文件，把内容清空）。
文件创建失败或者不能被写，会抛出IOException。

File outFile = new File("newFace.gif"); 
//写入到文件,原来内容被覆盖.
FileOutputStream outStream =
     new FileOutputStream(outFile); 

//写入到文件末尾,原来内容不被覆盖.
FileOutputStream fo = new FileOutputStream("MyOut.dat", true);

(2) 使用输出流对象，向目的地写入字节
可以调用从父类继承的write方法顺序地将数据写入文件
void write(int n) 
向目的地写入单个字节n，只写入低位的8个bit。
void write(byte b[]) 
向目的地写入一个字节数组中的所有数据
void write(byte b[], int off, int len) 
将字节数组b中，从下标为off的位置开始，写入len个字节到目的地。
只要不关闭流，每次调用write方法就顺序地向目的地写入内容，直到流被关闭

(3) 关闭流
void close()
关闭输入流，并释放任何与该流有关的资源。
关闭输出流可以把该流所用的缓冲区的内容，强制写到文件上。
(4) 其它方法
flush()：刷空输出流，并将输出流的缓冲区中的数据强制送出到目的地。

public BufferedReader(Reader in,int sz)   
 创建一个使用指定大小输入缓冲区的缓冲字符输入流。
public BufferedReader(Reader in)   
 创建一个使用默认大小输入缓冲区的缓冲字符输入流。
 参数in指定了一个被连接的底层字符输入流对象。

BufferedReader常用方法：
String readLine()
读取一个文本行。返回包含该行内容的字符串，不包含任何行终止符，如果已到达流末尾，则返回 null
int read()
读取一个字符
void close()
关闭的时候，会把连接的底层流也关闭掉，底层流无需再关闭。

BufferedWriter类构造方法：
public BufferedWriter(Writer out, int sz)   
 创建一个使用指定大小输入缓冲区的缓冲字符输出流。
public BufferedWriter(Writer out)   
 创建一个使用默认大小输入缓冲区的缓冲字符输出流。
 参数out指定了一个被连接的底层字符输出流对象

BufferedWriter类构造方法：
public BufferedWriter(Writer out, int sz) 
public BufferedWriter(Writer out)   
示例：
FileWriter fw = new FileWriter("1.txt");
BufferedWriter buf = new BufferedWriter(fw, 1024);
BufferedWriter buf1 = new BufferedWriter(new FileWriter ("2.txt"));

BufferedWriter常用方法：
String newLine()
写入一个行分隔符。
void write(char[] cbuf, int off, int len)
写入字符数组的某一部分。
void write(int c)
写入单个字符
void write(String s) 
写入字符串。 
void write(String s, int off, int len) 
写入字符串的某一部分。 

BufferedInputStream、BufferedOutputStream
缓冲流输入输出是一个非常普通的性能优化。
BufferedInputStream构造方法:
（1）public BufferedInputStream(InputStream in)
（2）public BufferedInputStream(InputStream in,int size)
BufferedOutputStream构造方法：
（1）public BufferedOutputStream(OutputStream out)
（2）public BufferedOutputStream(OutputStream out, int size)

InputStreamReader 
字节流到字符流的桥接器。
使用指定的字符集读取字节，并将它们解码为字符。
每次调用read()方法都可能导致从底层字节输入流中读取一个或多个字节（取决于字符编码集）。
构造方法：
InputStreamReader(InputStream in)：使用默认字符集
InputStreamReader(InputStream in,String charsetName)：使用指定字符集
示例：InputStreamReader = new InputStreamReader(new FileInputStream(file), "utf-8");

OutputStreamWriter
字符流到字节流的桥接器。
使用指定的字符编码集将写入其中的字符，编码为字节，再写入到底层字节流中。
每次调用write()方法都会导致在给定字符上调用编码转换器。
构造方法：
OutputStreamWriter(OutputStream in)：使用默认字符集
OutputStreamReader(OutputStream in,String charsetName)：使用指定字符集
示例：InputStreamReader = new InputStreamReader(new FileInputStream(file), "utf-8");

ByteArrayInputStream(字节数组输入流)：
从内存中读取数据。 
构造方法：
public ByteArrayInputStream(byte[] buf)   
 buf指定了内存缓冲区，从内存缓冲区读取数据。
public ByteArrayInputStream(byte[] buf, int offset, int length)   
从内存缓冲区的指定位置和指定大小范围中读取数据。
常用方法：
int read()：从缓冲区读取一个字节
int read(byte[] b)：从缓冲区读取多个字节，放到数组b中

ByteArrayOutputStream(字节数组输出流)：
向内存中写入数据。 
构造方法：
public ByteArrayOutputStream()   
关联一个内存缓冲区，大小为32个字节，会自动扩容。
public ByteArrayOutputStream(int size)   
内存缓冲区大小由size指定，会自动扩容。
常用方法：
void write(int b)：向缓冲区写入一个字节
void write(byte[] b, int off, int len)：向缓冲区写入多个字节














12线程


线程的创建：
（1）通过继承Thread类创建线程。
① 定义Thread类的一个子类
public class MyThread extends Thread{ ... }
② 定义子类中的run( )方法，覆盖父类的run( )方法
public void run() { ... } 
③ 创建该子类的一个线程对象
  MyThread thread1 = new MyThread();
④ 通过start( )方法启动线程。
 thread1.start();

（2）通过向Thread()构造方法传递Runnable对象来创建线程。
① 定义一个实现Runnable接口的类
public class MyRunnable implements Runnable{ ... }
② 在该类中实现Runnable接口中定义的run( )方法
public void run() { ... } 
③ 创建该类的一个对象，并将该对象作为实参，传递给Thread类的构造函数，从而生成一个Thread类的对象。  
MyRunnable testRunnable = new MyRunnable();
 Thread testThread = new Thread(testRunnable); 
④ 通过start( )方法启动线程。


常用方法：
void start() 
 使该线程开始执行；Java 虚拟机调用该线程的 run 方法。 
static void sleep(long millis) 
在指定的毫秒数内让当前正在执行的线程休眠（暂停执行）。
long getId() 
 返回该线程的标识符。 
String getName()  
返回该线程的名称。 
void interrupt()
中断线程。 

常用方法：
static boolean interrupted() 
测试当前线程是否已经中断。 
boolean isAlive() 
测试线程是否处于活动状态。
void setName(String name) 
改变线程名称，使之与参数 name 相同。
static void yield() 
暂停当前正在执行的线程对象（让当前线程放弃自己的CPU资源），并执行其他线程。
currentThread()返回当前正在使用cpu的线程

synchronized关键字的使用：
① synchronized方法
synchronized void method() { }
② synchronized代码片段
void method() {
      synchronized{  //代码段里面操作功能信息    } 
}
③ synchronized 对象
void method() {
              synchronized(this) { }
}

























































13网络编程
1．获取rnet上主机的地址  
使用InetAddress类的静态方法getByName(String s) 获得一个InetAddress对象。和InterName
InetAddress address = InetAddress.getByName("www.sina.com.cn");
String ip=address1.getHostAddress();  转为ip地址

InetAddress主要实例方法：
String  getHostAddress()：获取IP地址；
String  getHostName()：获取域名；

获取本机IP
static InetAddress getLocalHost()：获取一个InetAddress对象，包含本机的域名和IP地址。


1、首先在服务器上创建ServerSocket对象，
构造方法：
ServerSocket() ：创建一个没有绑定到指定端口的服务器端套接字对象，系统会随机分配一个没有被占用的端口号。
ServerSocket​(int port)：创建一个没有绑定到端口port的服务器端套接字对象。
方法：
Socket accept()：阻塞当前线程的执行，直到收到客户的连接请求，返回一个和客户端Socket对象相连接的Socket对象。
不同的客户端来连接，会相应返回不同的Socket对象。

2、客户端的程序使用Socket类建立到服务器的连接。
Socket(String host,int port) host 是服务器的IP地址 port是端口号
建立连接到服务器的套接字对象：
    try {  
           Socket mysocket = new Socket(“http://192.168.0.78”,1880);
     }
     catch(IOException e) { 
     } 

getInputString()获取一个输入流，这个输入流的源和服务器端的一个输入流的目的地相同，
因此客服端用输入流可以读取服务器写入到输出流的数据

getOutputString()获取一个输入流，这个输入流的源和服务器端的一个输入流的目的地相同，
因此客服端用输入流可以读取服务器写入到输出流的数据



























15泛型与集合框架


Collection接口中定义的常用方法：
 boolean add(E e) 
 添加元素e到collection 中。 其中E为泛型。如果是基本类型，会做装箱操作，转换成对应的包装类型的对象。
boolean remove(Object o) 
 从此 collection 中移除指定元素的单个实例，如果存在的话（可选操作）。Object表示任何类型。
boolean contains(Object o)   
 如果此 collection 包含指定的元素，则返回 true
int size()           
 返回此 Collection 中的元素数。
 boolean isEmpty()    
 如果此 collection 不包含元素，则返回 true。 
 void clear()   
移除此 collection 中的所有元素（可选操作）。 
 Object[]   toArray()   
 返回包含此 collection 中所有元素的数组。  


（1）public LinkedList()
构造一个空链表。
（2）public LinkedList(Collection c)：
构造一个包含给定集合中元素的链表。


public boolean add(E e)	链表末尾添加元素，返回是否成功，成功为 true，失败为 false。
public void add(int index, E element)	向指定位置插入元素。

public E remove(int index)
public boolean remove(E e)
删除一个节点，或者指定位置，或者指定结点中的数据
public E get(int index)
返回索引位置的节点中的数据
public int indexOf(E e)
查找包含数据e的结点的位置（首次出现）
public int lastIndexOf(E e)
查找包含数据e的结点的位置（最后一次出现）
public E set(int index, E e)
将指定位置的结点中的数据更新为e，并返回旧数据
public void addFirst(E e)
在头部插入一个节点，节点中数据为e
public void addLast(E e)
public E removeFirst()
public E removeLast()
public int size()    节点个数         -
public boolean contains(Object e)判断是否含有某一元素。
public boolean removeFirstOccurrence(Object o)
移除第一次出现的元素o
public boolean removeLastOccurrence(Object o)
移除最后一次出现的元素o
public Object clone()
克隆一个链表
public E getFirst()/getLast()
返回第一个/最后一个列表元素


集合的遍历：依次访问集合中的所有元素，称为集合的遍历。
LinkedList的遍历方式：
1）使用get(int index)方法+循环结构


2）使用Iterator对象 + 循环结构
Iterator：是一种设计模式，将集合数据的存储与遍历分离，用于对 Collection 集合进行迭代遍历。
Collection对象调用iterator()方法，可以获得一个Iterator对象。
常用方法：
（1）hasNext()：Iterator对象调用该方法检查序列中是否还有元素。
（2）next()：第一次调用next()方法时，它返回序列的第一个元素，以后再次调用时将获得序列中的下一个元素。
（3）remove()： Iterator对象调用该方法删除上次调用next方法获取的元素。


ArrayList类：采用线性顺序存储结构来存储元素。
大小可动态调整
构造方法：
（1）public ArrayList()
默认的构造方法，以默认的大小(16) 初始化内部的数组。
（2）public ArrayList(Collection c)：
用一个Collection对象来构造，并将该集合的元素添加到ArrayList。
（3）public ArrayList(int n)：
用指定的大小来初始化内部的数组。


ArrayList类常用方法：
public boolean add(E e)
在集合末尾追加一个元素。
public boolean add(int index, E e)
在列表中指定位置插入一个元素。
public Object remove(int index)
移除索引位置的元素，并返回被移除的这个对象
public E get(int index)
返回索引位置的列表元素
public int indexOf(Object o)
返回元素的索引。如果不在列表中，则返回-1.
public E set(int index,E e)
用指定的元素e替换指定位置index上的元素.

Stack类：采用线性存储结构来存储元素。
对元素的操作总是在栈顶
后进先出
构造方法：
（1）public Stack()
Stack<E>
创建一个空栈。
常用方法：
public E push(E item);实现压栈操作
public E pop();实现弹栈操作。
public boolean empty();判断堆栈是否还有数据。有返回false无返回true
public E peek();获取堆栈顶端的数据，但不删除该数据。
public int search(Object data);获取数据在堆栈中的位置。 不含则返回-1

TreeSet构造方法：
（1）public TreeSet()
默认的构造方法，根据添加的元素相互间的大小来排序存放。
（2）public TreeSet(Collection c)：
用一个Collection对象来构造，并将该集合的元素添加到TreeSet中。
（3） public TreeSet(Comparator c) ：
用指定的比较器，对元素进行排序存放。
（4） public TreeSet(SortedSet s) ：
用已排序的s中的所有元素以及比较规则，来构造对象。

TreeSet常用方法：
public boolean add(E o) 向树集添加加节点。
public void clear() 删除树集中的所有节点。
public void contains(Object o) 如果树集中有包含参数指定的对象，该方法返回true，否则返回false 。
public E first() 返回树集中的第一个节点中的数据（最小的节点）。
public E last() 返回最后一个节点中的数据（最大的节点）。
public isEmpty() 判断是否是空树集，如果树集不含任何节点，该方法返回true 。
public boolean remove(Object o) 删除树集中的存储参数指定的对象的最小节点。
public int size() 返回树集中节点的数目。



哈希算法也称为散列算法，是将数据依据算法直接指定（映射）到一个地址上。

HashSet：不允许有重复元素，不对元素排序。
主要用哈希算法确定元素在集合中的存放位置。
HashSet常用方法：
（1）public HashSet()
默认的构造方法。
（2）public boolean add(E e)
添加元素e。
HashSet集合在用add()方法添加一个新对象时：
首先会调用equals(Object o)来比较新项和已有的某项是否相等
若不相等时，会调用对象的hashCode()方法得到对象的散列码，然后根据这个码计算出对象在集合中存储的位置。

在实际使用中，经常需要对无序集合中的元素进行排序、查找元素、随机排序、逆转顺序、旋转移动等操作。
Java中提供了Collections类来对集合进行常见的操作。
public static sort(List<E> list) 
将list中的元素升序排列。
public static sort(List<E> list,  Comparator<E> c) 
将list中的元素按照比较器c指定的比较规则，升序排列。
int binarySearch(List<T> list, T key,CompareTo<T> c) 
使用折半法查找list是否含有和参数key相等的元素，如果key链表中某个元素相等，方法返回和key相等的元素在链表中的索引位置（链表的索引位置从0考试），否则返回-1。

Collections类来对集合进行常见的操作：
public static void shuffle(List<E> list) 
将list中的数据按洗牌算法重新随机排列。
static void rotate(List<E> list, int distance) 
循环移动链表中的数据，distance大于0，表示循环右移distance个元素；小于0，则表示循环左移。
public static void reverse(List<E> list) 
逆转list中的数据存放顺序。


HashMap构造方法：
public HashMap()
构造一个具有初始容量(16）和默认加载因子（0.75）的空HashMap。
public HashMap(int initialCapacity)
指定初始容量和默认加载因子。
public HashMap(int initialCapacity, float loadFactor)
指定初始容量和加 载因子。
public HashMap(Map m)
构造一个映射关系与map相同的新HashMap，默认加载因子（0.75）。
容量表示哈希表中桶的数量，加载因子表示在容量增加之前可以达到多满的一种尺度。


HashMap常用方法：
public V put(K key,V value)
将键/值对数据存放到散列映射中，返回键所对应的值，key值重复，则会用新的value替换旧的值，并返回旧的值。
public void clear() 
清空散列映射。
public Object clone()  
返回当前散列映射的一个克隆。
public boolean containsKey(Object key) 
散列映射是否包含key指定的键，所在的“键/值” 。 
public boolean containsValue(Object value) 
如果散列映射有“键/值”对的值是参数指定的值。
public V get(Object key) 
返回散列映射中使用key做键的“键/值”对中的值。
public boolean isEmpty()  
如果散列映射不含任何“键/值”对，方法返回true，否则返回false。
public V remove(Object key) 
删除散列映射中键为参数指定的“键/值”对，并返回键对应的值。
public int size() 
返回散列映射的大小，即散列映射中“键/值”对的数目。
Set<Map.Entry<K,V>> entrySet()
返回此HashMap中包含的所有映射对，组成的Set集合。
Set<K> keySet()
返回此HashMap中包含的所有的键，组成的Set集合。
Collection<V> values()
返回此HashMap中包含的所有的值，组成的Collection集合。 


HashMap的遍历：
（1）先将HashMap对象转换成Collection对象。
Set<Map.Entry<K,V>> entrySet()
返回此HashMap中包含的所有映射对，组成的Set集合。
Set<K> keySet()
返回此HashMap中包含的所有的键，组成的Set集合。
Collection<V> values()
返回此HashMap中包含的所有的值，组成的Collection集合。 
（2）使用Collection对象的iterator()方法获取迭代器。
（3）使用迭代器进行遍历。


































































































































