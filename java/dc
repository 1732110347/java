src 里边存的是源文件（.java），就是人能看懂的文件，都是程序员写好的源代码
bin 里边存的是字节码文件（.class），就是编译后的文件，让机器看的
两个文件夹里的文件名是对应的。

final 将变量定义为常量
当用final去修饰一个类的时候，表示这个类不能被继承。
被final修饰的方法不能被重写。

String 引用类型
Java中的string是字符串的意思，当声明了一个字符串变量时，便可以在里面存储数据。
1）String类是final类，也即意味着String类不能被继承，并且它的成员方法都默认为final方法。
在Java中，被final修饰的类是不允许被继承的，并且该类中的成员方法都默认为final方法。
2）上面列举出了String类中所有的成员属性，从上面可以看出String类其实是通过char数组来保存字符串的。
如果赋值号的右边是两个常量则为常量，若有一个变量则为变量相当于new String("")




var关键字（
有些时候，类型的名字太长，写起来比较麻烦。例如：
StringBuilder sb = new StringBuilder();
这个时候，如果想省略变量类型，可以使用var关键字：
var sb = new StringBuilder();
编译器会根据赋值语句自动推断出变量sb的类型是StringBuilder。对编译器来说，语句：
var sb = new StringBuilder();
实际上会自动变成：
StringBuilder sb = new StringBuilder();
因此，使用var定义变量，仅仅是少写了变量类型而已。）

public int length()
获取一个字符串的长度（字符个数） 
length 数组的元素个数称为数组的长度。对于一维数组“xxx.length"的值就是数组中元素个数。
二维 是含有一维的个数。

println是print line的缩写，表示输出并换行。因此，如果输出后不想换行，可以用print()：
如果要把数据显示成我们期望的格式，就需要使用格式化输出的功能。格式化输出使用System.out.printf()，通过使用占位符%?，printf()可以把后面的参数格式化成指定格式：

.调用方法

nextLine() / nextInt() / nextDouble() / ...
读取 一整行   返回int型

import语句导入java.util.Scanner，import(导入）是导入某个类的语句（java里的util包中的scanner类），必须放到Java源代码的开头，后面我们在Java的package中会详细讲解如何使用import。

System.out代表标准输出流
System.in代表标准输入流。直接使用System.in读取用户输入虽然是可以的，但需要更复杂的代码，而通过Scanner就可以简化后续的代码。

scanner.nextLine()，要读取用户输入的整数，使用scanner.nextInt()。Scanner会自动转换数据类型，因此不必手动转换。

2 equals (同等的)  public boolean equals(String s)
xx.equals（String xx）比较当前对象是否字符序列相同，忽略大小写。
String s1 = new String("天道酬勤");
String s2 = new String("天道酬勤");
System.out.println(s1.equals(s2)); true

3 startsWith  endsWith  public boolean startsWith(String s)    public boolean endsWith(String s)
判断当前String对象的字符序列前缀/后缀是否是参数s指定的字符串对象中的字符序列。
String tom = "天气预报，阴有小雨", jerry = "比赛结果，中国队赢得胜利";
    tom.startsWith("天气");
    tom.endsWith(“大雨”);   jerry.endswith("胜利");

4 compareTo（比较函数）  public int compareTo(String s)
调用该方法的对象，按字典序，与参数s指定的对象中的字符序列比较大小。
String str = "abcde"; 
str.compareTo("boy"); //将str的字符序列"abcde"与"boy" 比较
 如果当前String对象的字符序列与s的相同，该方法返回值0，如果大于s的字符序列，该方法返回正值；如果小于s的字符序列，该方法返回负值。
  System.out.println(str.compareTo("boy")); //结果为？   a-b=-1
编写sort方法将一个String数组中的String对象按字典序排序。

相关方法：public int compareToIgnoreCase(String s)
比较时忽略大小写

5  contains （包含）   public boolean contains(String s):
String tom="student";
System.out.println(tom.contains("e"));
判断当前String对象的字符序列是否包含参数s的字符序列

6  indexOf     public int indexOf (String str):
从当前String对象的字符序列的下标为0的位置开始，检索首次出现str的字符序列的位置，并返回该位置。如果没有检索到，该方法返回的值是-1。
String tom = "I am a good cat"；
System.out.println(tom.indexOf("a"));//值是2
其相关方法：
   indexOf(String s, int startpoint) ：从startpoint的位置开始检索
tom.indexOf("a",7);//值是13
   lastIndexOf(String s)：最后一次出现s的字符序列的位置
tom.lastIndexOf("a");//值是13

7  substring （求子串）  public String substring(int startpoint)
由当前String对象的字符序列中，startpoint位置到最后的字符所得到的字符序列组成的一个新的字符串对象。
String tom="student";
System.out.println(tom.substring(1);//tudent
substring(int start, int end)
 由当前String对象的字符序列中，start位置至end–1位置上的字符组成的新的字符串对象。
String s2 = tom.substring(1, 6);//tuden

8  trim （修剪） public String trim() 
得到一个新的String对象：当前String对象的字符序列去掉前后空格后的字符序列。 
String tom=" an apple  ";
String s3 = tom.trim();//an apple

sort 方法为泡沫法
  utile包值哦你Arrays调用sort方法  Arrays.sort(xx);


getChars() 方法将字符从字符串复制到目标字符数组 
srcBegin -- 字符串中要复制的第一个字符的索引。  （开始，）
srcEnd -- 字符串中要复制的最后一个字符之后的索引。最后一个是减一位置上的（结束）
dst -- 目标数组。
dstBegin -- 目标数组中的起始偏移量。
  String s="1945年8月15日是抗战胜利日";
      a=new char[4];
      s.getChars(11,15,a,0);结果。抗战胜利


toCharArray() 方法将字符串转换为字符数组。
  c="十一长假期间，学校都放假了".toCharArray();
	      for(int i=0;i<c.length;i++)
	        System.out.print(c[i]);


getBytes（）（ 输出固定位置       （一个字为两个字符  先数组 然后开始和结束
  byte d[]="Java你好".getBytes(); 
       System.out.println("数组d的长度是:"+d.length);
       String s=new String(d,6,2); //输出：好
       System.out.println(s);
       s=new String(d,0,6);
       System.out.println(s);   //输出：Java你


toString() 方法用于返回以一个字符串表示的 Number 对象值。
如果方法使用了原生的数据类型作为参数，返回原生数据类型的 String 对象值。
如果方法有两个参数， 返回用第二个参数指定基数表示的第一个参数的字符串表示形式。
  Integer x = 5;
        System.out.println(x.toString());  5
        System.out.println(Integer.toString(12)); 12


Date date = new Date();返回现在时间
       System.out.println(date.toString());


matches() 方法用于检测字符串是否匹配给定的正则表达式。
调用此方法的 xxx小.matches(regex（xx）) 形式与以下表达式产生的结果完全相同：
Pattern.matches(xxx小, xx大)

import java.util.regex.Pattern;
String content = "I am noob " +
        "from runoob.com.";
      String pattern = ".*runoob.*"; 
      boolean isMatch = Pattern.matches(pattern, content);
  
   String regex = "[a-zA-Z|0-9|_]+"; 
    String c="ada";   
      if(c.matches(regex)) {


%s使用%s占位
String str = "I am noob ";		 
		System.out.printf("%s",str);

使用String.format转换
String url = “我叫%s,今年%s岁。”;
String name = “阳阳”;
url = String.format(url,name);

替换ArrayList  add  replaceAll
import java.util.ArrayList;
ArrayList add() 方法插入元素
        //创建一个数组
        ArrayList<xx> primeNumbers = new ArrayList();xxx类型String Integer
        // 往数组插入元素
        primeNumbers.add(2);
        primeNumbers.add(3);
        primeNumbers.add(5);
        System.out.println("ArrayList: " + primeNumbers);
 primeNumbers.replaceAll(e ->  e*2);   替换
	        System.out.println("更新后的 ArrayList: " + primeNumbers);

replaceAll
String str = "12hello567bird".replaceAll("[a-zA-Z]+", "你好")；
12你好567你好

3、字符串的分解：
public String[] split(String regex)
返回一个字符数组，数组里面的内容：用参数regex指定的正则表达式作为分隔标记，将当前字符串对象中的字符序列分隔成的部分。
不改变当前的字符串对象的字符序列。
如果当前字符串对象的前缀满足regex指定的规则，则会认为前缀前面不含任何字符的字符序列： ""是数组的第一个元素。

 String reader="12adad sada";     
  //regex匹配由空格、数字和!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~组成的字符序列
      String s = "[\\s\\d\\p{Punct}]+"; 
     String c[]=  reader.split(s); 
     for(int i=0;i<c.length;i++){
         int m = i+1;
         System.out.println(c[i]); 空 adad sada


java字符串数字与数字的转换
1：字符串数字转数字
假设给定一个字符串，String str="1234";要转为转数字可以这样：int  a=Integer.valueOf(str);
2.数字转字符串数字
假设给定一数字，int a=1234；可以这样：String str=a+"";或者String str=String.valueOf(a);

Java parseInt() 方法
Java Number类Java Number类
parseInt() 方法用于将字符串参数作为有符号的十进制整数进行解析。
如果方法有两个参数， 使用第二个参数指定的基数，将字符串参数解析为有符号的整数。
static int parseInt(String s)
static int parseInt(String s, int radix)
s -- 十进制表示的字符串。
radix -- 指定的基数。
返回值
parseInt(String s): 返回用十进制参数表示的整数值。
parseInt(int i): 使用指定基数的字符串参数表示的整数 (基数可以是 10, 2, 8, 或 16 等进制数) 。


图形用户界面GUI


private关键字
可以修饰成员变量和成员方法,被其修饰的成员只能在本类中被访问
应用：在定义类时给成员变量赋值private，并提供get和set方法用于外部访问，这样可以提高数据的安全性

ublic class Telphone{
      private float screen；

      private float cpu;

      private float mem;

      public float getScreen(){
             return screen;
      }//此处用getScreen方法获取属性screen属性的值。在后面的程序中若要用到属性screen，调用此方法即可。

      public void setScreen(float newScreen){
            screen=newScreen
      }//此处用serScreen方法为属性screen赋值。


DEMO试样

Variable易变的


每个对象都有一个名为this的引用，它指向当前对象本身。
this只能用于类的构造方法和实例方法中。不能类方法

1.普通的直接引用 构造方法
this 相当于是指向当前对象本身。在构造方法中，代表使用该构造方法所创建的对象
public class People{
    int leg,hand;
    String name;
    People(String s){
        name=s;
        this.init();   //可以省略this，即将this.init();写成init();
    }
    void init(){
       leg=2;
       hand=2;
       System.out.println(name+"有"+hand+"只手"+leg+"条腿");
    }
    public static void main(String args[]){
      People boshi=new People("布什"); //创建boshi时，构造方法中的this就是对象boshi
    }
} 


2.形参与成员名字重名，用 this 来区分： 实例方法
this.name=name this.name是成员变量
this.方法 this可以省略
this.成员变量
static成员变量在实例方法中出现默认是。类名.成员变量 但static可以和其他对象共享。通常情况下可以省略
对于类方法的调用为 类名.方法
一个实例方法调用另一个方法时可以省略this或类名
this不能出现在类方法中，因为类方法可以通过类名直接调用，此时可能没有对象产生

extends继承

implements关键字
使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）。

接口（英文：Interface）

基类class













