












9 组件及事件处理

JFrame构造方法：
JFrame()  ：创建无标题窗口。
JFrame(String s) ： 创建标题名字是字符串s的窗口。
例如：JFrame  f = new JFrame("Hello");
setDefaultCloseOperation方法：
设置单击窗口上的关闭按钮时的事件处理方式。
JFrame.DO_NOTHING_ON_CLOSE什么都不做
JFrame.HIDE_ON_CLOSE隐藏当前窗口
JFrame.DISPOSE_ON_CLOSE隐藏当前窗口，并释放窗口占有的其他资源
JFrame.EXIT_ON_CLOSE结束窗口所在的应用程序

public void setBounds(int x,int y,int w,int h)	以(x,y)为对象的左上角，以w为宽，以h为高设置对象的显示区域 
public void setResizable(boolean b)	设置是否可以调整大小
public void setSize(int width,int height)	设置对象的大小
public void  dispose()	撤销窗口，释放资源
public void setLayout(LayoutManager mgr) 	设置窗口的布局管理器
public void setVisible(boolean b)	设置组件是否显示
public void setLocation(int x,int y)	设置组件显示位置的左上角坐标为(x,y)
public Component add(Component comp) 	添加组件
public void setMenuBar(MenuBar mb) 	设置菜单栏
public void validate() 	再次布置窗口上面的组件（刷新）
public void setBackground(Color c)	设置对象的背景色为c 
public void  setLocationRelativeTo(Component c)	设置窗口的相对于组件的位置，c为null时，表示放在屏幕中央
public void setFont(Font font)	设置对象的字体样式为font
public void setContentPane(Container c)	设置窗口的内容面板
public String getName()	返回对象的名称
Public void setTitle(String s)	设置窗口的标题


10输入输出

1)  File(String filename);
 参数filename指明了文件名，文件名可以是完整文件名（目录+文件名），也可以是相对文件名，也可以是目录。
 例如： 
File f1 = new File(“1.txt”);   //只有文件名，在当前项目路径下。
File f2 = new File(“D:\\Java”);  //目录
File f3 = new File(“D:/Java/1.txt”); //两个反斜杠和正斜杠都可以

2) File(String directoryPath, String filename);
 directoryPath是目录路径（父目录），filename可包含目录和文件名（相对于父目录的文件或目录）。
例如： 
File f1 = new File("D:\\Java", "1.txt"); //D盘Java目录里面的1.txt文件
File f2 = new File("D:\\Java", "src"); //D盘Java目录里面的src目录

3) File(File file, String filename);
 file是一个文件对象（父目录），filename可包含目录和文件名（相对于父目录的文件或目录）。
例如： 
File f1 = new File("D:\\Java"); //D盘Java目录
File f2 = new File(f1, "src"); //D盘Java目录里面的src目录
File f3 = new File(f1, "1.txt"); //D盘Java目录里面的1.txt文件

File类提供方法，获取文件的属性：
public String getName() 获取文件的名字。
public boolean canRead() 判断文件是否是可读的。
public boolean canWrite() 判断文件是否可被写入。
public boolean exits() 判断文件是否存在。
public long length() 获取文件的长度（单位是字节）。
public String getAbsolutePath() 获取文件的绝对路径。
public String getParent() 获取文件的父目录。
public boolean isFile() 判断文件是否是一个普通文件，而不是目录。
public boolean isDirectroy() 判断文件是否是一个目录。
public boolean isHidden() 判断文件是否是隐藏文件。
public long lastModified() 获取文件最后修改的时间。

createNewFile()返回boolean，表示是否创建文件成功

file.delete()返回boolean，表示删除文件成功

f.exists() 返回boolean，表示文件是否存在

1．创建目录： public boolean mkdir() 如果创建成功返回true 如果失败返回false 如果目录已经存在返回false
2．列出目录中的文件 
public String[] list() 用字符串形式返回目录下的全部文件。
public File [] listFiles() 用File对象形式返回目录下的全部文件。 
public String[] list(FilenameFilter obj) 用字符串形式返回目录下的指定类型的所有文件。
public File [] listFiles(FilenameFilter obj) 用File对象形式返回目录下的指定类型所有文件。
上述两方法的参数FilenameFilter是一个接口，该接口有一个方法：
public boolean accept(File dir,String name); 判断目录下的文件是否需要被列出。

1）用Runtime 类的getRuntime()静态方法创建一个Runtime对象：
例如：Runtime ec=Runtime.getRuntime();
	2） 通过Runtime对象调用exec(String command)方法打开本地机的可执行文件或执行一个操作。
例如：ec.exec(Notepad.exe);


(1) 构造输入流对象，设定输入流的源
 使用FileInputStream类的下列构造方法创建指向文件的输入流。
FileInputStream(String name);
FileInputStream(File fileobj); 
其中：参数name或者fileobj指定的文件称为输入流的源。
如果输入流指向的文件不存在，则会抛出IOException。
FileInputStream in=new FileInputStream("hellow.txt");创建指向文件xx的输入流

File f=new File("hellw.txt");指定输入流的源
FileInputStream in=new FileInputStream(f);创建指向源的输入流


(2) 使用输入流对象，读取字节
可以调用从父类继承的read方法顺序地从文件中读取数据
int read() 
读取单个字节的数据，返回字节值（0~255整数），如果未读出字节就返回-1。
int read(byte b[]) 
读取b.length个字节到字节数组b中，返回实际读取的字节数。如果到达文件的末尾，则返回-1。
int read(byte b[], int off, int len) 
读取len个字节到字节数组b中，从下标为off的位置开始存放。并返回实际读取的字节数目。如果到达文件的末尾，则返回-1。
只要不关闭流，每次调用read方法就顺序地读取文件中的其余内容，直到文件的末尾或文件字节输入流被关闭。

(3) 关闭流
    void close()
关闭输入流，并释放任何与该流有关的资源。


(1) 构造输出流对象，设定输出流的目的地
 使用FileOutputStream类的下列构造方法创建指向文件的输出流。
FileOutputStream(String name);
FileOutputStream(File file);
FileOutputStream(String filepath , boolean append) 
FileOutputStream (File fileobj , boolean append) 
其中：参数name或者file指定的文件称为输出流的目的地。
如果文件不存在，则会创建该文件；如果文件存在，则会根据append是否为false(没有append参数则认为是false)，来决定是否刷新文件（重置文件，把内容清空）。
文件创建失败或者不能被写，会抛出IOException。

File outFile = new File("newFace.gif"); 
//写入到文件,原来内容被覆盖.
FileOutputStream outStream =
     new FileOutputStream(outFile); 

//写入到文件末尾,原来内容不被覆盖.
FileOutputStream fo = new FileOutputStream("MyOut.dat", true);

(2) 使用输出流对象，向目的地写入字节
可以调用从父类继承的write方法顺序地将数据写入文件
void write(int n) 
向目的地写入单个字节n，只写入低位的8个bit。
void write(byte b[]) 
向目的地写入一个字节数组中的所有数据
void write(byte b[], int off, int len) 
将字节数组b中，从下标为off的位置开始，写入len个字节到目的地。
只要不关闭流，每次调用write方法就顺序地向目的地写入内容，直到流被关闭

(3) 关闭流
void close()
关闭输入流，并释放任何与该流有关的资源。
关闭输出流可以把该流所用的缓冲区的内容，强制写到文件上。
(4) 其它方法
flush()：刷空输出流，并将输出流的缓冲区中的数据强制送出到目的地。

public BufferedReader(Reader in,int sz)   
 创建一个使用指定大小输入缓冲区的缓冲字符输入流。
public BufferedReader(Reader in)   
 创建一个使用默认大小输入缓冲区的缓冲字符输入流。
 参数in指定了一个被连接的底层字符输入流对象。

BufferedReader常用方法：
String readLine()
读取一个文本行。返回包含该行内容的字符串，不包含任何行终止符，如果已到达流末尾，则返回 null
int read()
读取一个字符
void close()
关闭的时候，会把连接的底层流也关闭掉，底层流无需再关闭。

BufferedWriter类构造方法：
public BufferedWriter(Writer out, int sz)   
 创建一个使用指定大小输入缓冲区的缓冲字符输出流。
public BufferedWriter(Writer out)   
 创建一个使用默认大小输入缓冲区的缓冲字符输出流。
 参数out指定了一个被连接的底层字符输出流对象

BufferedWriter类构造方法：
public BufferedWriter(Writer out, int sz) 
public BufferedWriter(Writer out)   
示例：
FileWriter fw = new FileWriter("1.txt");
BufferedWriter buf = new BufferedWriter(fw, 1024);
BufferedWriter buf1 = new BufferedWriter(new FileWriter ("2.txt"));

BufferedWriter常用方法：
String newLine()
写入一个行分隔符。
void write(char[] cbuf, int off, int len)
写入字符数组的某一部分。
void write(int c)
写入单个字符
void write(String s) 
写入字符串。 
void write(String s, int off, int len) 
写入字符串的某一部分。 

BufferedInputStream、BufferedOutputStream
缓冲流输入输出是一个非常普通的性能优化。
BufferedInputStream构造方法:
（1）public BufferedInputStream(InputStream in)
（2）public BufferedInputStream(InputStream in,int size)
BufferedOutputStream构造方法：
（1）public BufferedOutputStream(OutputStream out)
（2）public BufferedOutputStream(OutputStream out, int size)

InputStreamReader 
字节流到字符流的桥接器。
使用指定的字符集读取字节，并将它们解码为字符。
每次调用read()方法都可能导致从底层字节输入流中读取一个或多个字节（取决于字符编码集）。
构造方法：
InputStreamReader(InputStream in)：使用默认字符集
InputStreamReader(InputStream in,String charsetName)：使用指定字符集
示例：InputStreamReader = new InputStreamReader(new FileInputStream(file), "utf-8");

OutputStreamWriter
字符流到字节流的桥接器。
使用指定的字符编码集将写入其中的字符，编码为字节，再写入到底层字节流中。
每次调用write()方法都会导致在给定字符上调用编码转换器。
构造方法：
OutputStreamWriter(OutputStream in)：使用默认字符集
OutputStreamReader(OutputStream in,String charsetName)：使用指定字符集
示例：InputStreamReader = new InputStreamReader(new FileInputStream(file), "utf-8");

ByteArrayInputStream(字节数组输入流)：
从内存中读取数据。 
构造方法：
public ByteArrayInputStream(byte[] buf)   
 buf指定了内存缓冲区，从内存缓冲区读取数据。
public ByteArrayInputStream(byte[] buf, int offset, int length)   
从内存缓冲区的指定位置和指定大小范围中读取数据。
常用方法：
int read()：从缓冲区读取一个字节
int read(byte[] b)：从缓冲区读取多个字节，放到数组b中

ByteArrayOutputStream(字节数组输出流)：
向内存中写入数据。 
构造方法：
public ByteArrayOutputStream()   
关联一个内存缓冲区，大小为32个字节，会自动扩容。
public ByteArrayOutputStream(int size)   
内存缓冲区大小由size指定，会自动扩容。
常用方法：
void write(int b)：向缓冲区写入一个字节
void write(byte[] b, int off, int len)：向缓冲区写入多个字节























































































































































































