filename是文件名字  directoryPath是文件路径  dir是目录
1)  File(String filename);
 参数filename指明了文件名，文件名可以是完整文件名（目录+文件名），也可以是相对文件名，也可以是目录。
 例如： 
File f1 = new File(“1.txt”);   //只有文件名，在当前项目路径下。
File f2 = new File(“D:\\Java”);  //目录
File f3 = new File(“D:/Java/1.txt”); //两个反斜杠和正斜杠都可以

2) File(String directoryPath, String filename);
 directoryPath是目录路径（父目录），filename可包含目录和文件名（相对于父目录的文件或目录）。
例如： 
File f1 = new File("D:\\Java", "1.txt"); //D盘Java目录里面的1.txt文件
File f2 = new File("D:\\Java", "src"); //D盘Java目录里面的src目录

3) File(File file, String filename);
 file是一个文件对象（父目录），filename可包含目录和文件名（相对于父目录的文件或目录）。
例如： 
File f1 = new File("D:\\Java"); //D盘Java目录
File f2 = new File(f1, "src"); //D盘Java目录里面的src目录
File f3 = new File(f1, "1.txt"); //D盘Java目录里面的1.txt文件

File类提供方法，获取文件的属性：
public String getName() 获取文件的名字。
public boolean canRead() 判断文件是否是可读的。
public boolean canWrite() 判断文件是否可被写入。
public boolean exits() 判断文件是否存在。
public long length() 获取文件的长度（单位是字节）。
public String getAbsolutePath() 获取文件的绝对路径。
public String getParent() 获取文件的父目录。
public boolean isFile() 判断文件是否是一个普通文件，而不是目录。
public boolean isDirectroy() 判断文件是否是一个目录。
public boolean isHidden() 判断文件是否是隐藏文件。
public long lastModified() 获取文件最后修改的时间。

createNewFile()返回boolean，表示是否创建文件成功

file.delete()返回boolean，表示删除文件成功

f.exists() 返回boolean，表示文件是否存在

1．创建目录： public boolean mkdir() 如果创建成功返回true 如果失败返回false 如果目录已经存在返回false
2．列出目录中的文件 
public String[] list() 用字符串形式返回目录下的全部文件。
public File [] listFiles() 用File对象形式返回目录下的全部文件。 
public String[] list(FilenameFilter obj) 用字符串形式返回目录下的指定类型的所有文件。
public File [] listFiles(FilenameFilter obj) 用File对象形式返回目录下的指定类型所有文件。
上述两方法的参数FilenameFilter是一个接口，该接口有一个方法：
public boolean accept(File dir,String name); 判断目录下的文件是否需要被列出。































