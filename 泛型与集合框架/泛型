泛型实现了把类型作为参数。
可以针对不同的类有相同的处理办法，并且不要求这些类之间具有继承性。
例如：
class PointDemo<T> {
       		private T x;
       		public void setX(T x) { 
               		this.x=x;
      		}
		}

参数T表示任意一种引用类型,可以是类或者接口，不能为基本类型
java中分基本数据类型（byte short int long float double char boolean）和引用数据类型（数组 类 接口）
java 为每种基本类型都提供了对应的封装类型，分别为：Byte、Short、Integer、Long、Float、Double、Character、Boolean。
引用类型是一种对象类型，它的值是指向内存空间的引用，就是地址。

（2）生成泛型类的对象，使用具体的类型替代泛型参数E
PointDemo<Integer> p1=new PointDemo<Integer>();
PointDemo<Float> p2=new PointDemo();//构造时可以不写类型
PointDemo<String> p3=new PointDemo<String>();


Java 集合框架主要包括两种类型的容器：
集合（Collection），存储元素（值）集合。
图（Map），存储键/值对映射的集合。
Collection和Map都是接口，不同的接口里面规定了不同的特征。
Collections类提供了一些算法，可以对实现了Collection接口类的集合对象，进行排序、查找、逆序等操作。

Collection接口：存储一组不唯一，无序的对象。
是最基本的集合接口之一。
一个Collection对象，可以存放一组对象。
使用泛型来表示存在放Collection对象中的元素的类型。
元素的类型只能是引用类型，可以相同，也可以不同。
接口中定义的常用方法：
 boolean add(E e) 
 添加元素e到collection 中。 其中E为泛型。如果是基本类型，会做装箱操作，转换成对应的包装类型的对象。
boolean remove(Object o) 
 从此 collection 中移除指定元素的单个实例，如果存在的话（可选操作）。Object表示任何类型。
boolean contains(Object o)   
 如果此 collection 包含指定的元素，则返回 true
int size()           
 返回此 Collection 中的元素数。
 boolean isEmpty()    
 如果此 collection 不包含元素，则返回 true。 
 void clear()   
移除此 collection 中的所有元素（可选操作）。 
 Object[]   toArray()   
 返回包含此 collection 中所有元素的数组。  





List接口：规定了一个有序的集合，允许元素重复。
继承了Collection接口。
List中的元素都对应着一个整数型的序号，记载其在容器中的位置。
 List元素的序号类似数组元素的下标。
可以根据序号存取容器中的元素。
主要实现类有ArrayList类、LinkedList类、Stack类。
LinkedList类：采用线性链式存储结构来存储元素。
是一种线性表，可以存储重复数据。
每个元素称为链表中的一个结点。 

LinkedList类：采用线性链式存储结构来存储元素。


其中data表示数据，previous和next表示引用。
每次插入一个元素，只需要申请一个新的结点。
删除元素，只需要删除一个旧的结点。
构造方法
（1）public LinkedList()
构造一个空链表。
（2）public LinkedList(Collection c)：
构造一个包含给定集合中元素的链表。


public boolean add(E e)	链表末尾添加元素，返回是否成功，成功为 true，失败为 false。
public void add(int index, E element)	向指定位置插入元素。

public E remove(int index)
public boolean remove(E e)
删除一个节点，或者指定位置，或者指定结点中的数据
public E get(int index)
返回索引位置的节点中的数据
public int indexOf(E e)
查找包含数据e的结点的位置（首次出现）
public int lastIndexOf(E e)
查找包含数据e的结点的位置（最后一次出现）
public E set(int index, E e)
将指定位置的结点中的数据更新为e，并返回旧数据
public void addFirst(E e)
在头部插入一个节点，节点中数据为e
public void addLast(E e)
public E removeFirst()
public E removeLast()
public int size()   节点个数          
-public boolean contains(Object e)判断是否含有某一元素。
public boolean removeFirstOccurrence(Object o)
移除第一次出现的元素o
public boolean removeLastOccurrence(Object o)
移除最后一次出现的元素o
public Object clone()
克隆一个链表
public E getFirst()/getLast()
返回第一个/最后一个列表元素


集合的遍历：依次访问集合中的所有元素，称为集合的遍历。
LinkedList的遍历方式：
1）使用get(int index)方法+循环结构


2）使用Iterator对象 + 循环结构
Iterator：是一种设计模式，将集合数据的存储与遍历分离，用于对 Collection 集合进行迭代遍历。
Collection对象调用iterator()方法，可以获得一个Iterator对象。
常用方法：
（1）hasNext()：Iterator对象调用该方法检查序列中是否还有元素。
（2）next()：第一次调用next()方法时，它返回序列的第一个元素，以后再次调用时将获得序列中的下一个元素。
（3）remove()： Iterator对象调用该方法删除上次调用next方法获取的元素。


ArrayList类：采用线性顺序存储结构来存储元素。
大小可动态调整
构造方法：
（1）public ArrayList()
默认的构造方法，以默认的大小(16) 初始化内部的数组。
（2）public ArrayList(Collection c)：
用一个Collection对象来构造，并将该集合的元素添加到ArrayList。
（3）public ArrayList(int n)：
用指定的大小来初始化内部的数组。


ArrayList类常用方法：
public boolean add(E e)
在集合末尾追加一个元素。
public boolean add(int index, E e)
在列表中指定位置插入一个元素。
public Object remove(int index)
移除索引位置的元素，并返回被移除的这个对象
public E get(int index)
返回索引位置的列表元素
public int indexOf(Object o)
返回元素的索引。如果不在列表中，则返回-1.
public E set(int index,E e)
用指定的元素e替换指定位置index上的元素.


Stack类：采用线性存储结构来存储元素。
对元素的操作总是在栈顶
后进先出
构造方法：
（1）public Stack()
Stack<E>
创建一个空栈。
常用方法：
public E push(E item);实现压栈操作
public E pop();实现弹栈操作。
public boolean empty();判断堆栈是否还有数据。有返回false无返回true
public E peek();获取堆栈顶端的数据，但不删除该数据。
public int search(Object data);获取数据在堆栈中的位置。 不含则返回-1


Set接口：规定了一个无序的集合，不允许元素重复。
继承了Collection接口。
元素存入顺序和集合内存储的顺序不同。
实现类有HashSet（乱序）、TreeSet（排序的）。
TreeSet类：采用树结构来存储元素。
树中的结点按照结点中的数据“大小”（不同类型的数据，大小规则不一样）进行排序。
下一层比上一层的小，同一层的左边比右边小。 


TreeSet构造方法：
（1）public TreeSet()
默认的构造方法，根据添加的元素相互间的大小来排序存放。
（2）public TreeSet(Collection c)：
用一个Collection对象来构造，并将该集合的元素添加到TreeSet中。
（3） public TreeSet(Comparator c) ：
用指定的比较器，对元素进行排序存放。
（4） public TreeSet(SortedSet s) ：
用已排序的s中的所有元素以及比较规则，来构造对象。

TreeSet常用方法：
public boolean add(E o) 向树集添加加节点。
public void clear() 删除树集中的所有节点。
public void contains(Object o) 如果树集中有包含参数指定的对象，该方法返回true，否则返回false 。
public E first() 返回树集中的第一个节点中的数据（最小的节点）。
public E last() 返回最后一个节点中的数据（最大的节点）。
public isEmpty() 判断是否是空树集，如果树集不含任何节点，该方法返回true 。
public boolean remove(Object o) 删除树集中的存储参数指定的对象的最小节点。
public int size() 返回树集中节点的数目。



哈希算法也称为散列算法，是将数据依据算法直接指定（映射）到一个地址上。

HashSet：不允许有重复元素，不对元素排序。
主要用哈希算法确定元素在集合中的存放位置。
HashSet常用方法：
（1）public HashSet()
默认的构造方法。
（2）public boolean add(E e)
添加元素e。
HashSet集合在用add()方法添加一个新对象时：
首先会调用equals(Object o)来比较新项和已有的某项是否相等
若不相等时，会调用对象的hashCode()方法得到对象的散列码，然后根据这个码计算出对象在集合中存储的位置。


在实际使用中，经常需要对无序集合中的元素进行排序、查找元素、随机排序、逆转顺序、旋转移动等操作。
Java中提供了Collections类来对集合进行常见的操作。
public static sort(List<E> list)   Collections.sort();
将list中的元素升序排列。
public static sort(List<E> list,  Comparator<E> c) 
将list中的元素按照比较器c指定的比较规则，升序排列。
int binarySearch(List<T> list, T key,CompareTo<T> c) 
使用折半法查找list是否含有和参数key相等的元素，如果key链表中某个元素相等，方法返回和key相等的元素在链表中的索引位置（链表的索引位置从0考试），否则返回-1。

Collections类来对集合进行常见的操作：
public static void shuffle(List<E> list) 
将list中的数据按洗牌算法重新随机排列。
static void rotate(List<E> list, int distance) 
循环移动链表中的数据，distance大于0，表示循环右移distance个元素；小于0，则表示循环左移。
public static void reverse(List<E> list) 
逆转list中的数据存放顺序。


Map接口：规定了一个存储键值对的集合，提供key（键）到value（值）的映射。
Map接口和Collection没有继承关系。
一个元素包含键（Key）和值（Value）两个数据，key值不允许重复。
实现类有HashMap（乱序）、TreeMap（有序）。
HashMap类：采用散列表来存储键值对。


HashMap构造方法：
public HashMap()
构造一个具有初始容量(16）和默认加载因子（0.75）的空HashMap。
public HashMap(int initialCapacity)
指定初始容量和默认加载因子。
public HashMap(int initialCapacity, float loadFactor)
指定初始容量和加 载因子。
public HashMap(Map m)
构造一个映射关系与map相同的新HashMap，默认加载因子（0.75）。
容量表示哈希表中桶的数量，加载因子表示在容量增加之前可以达到多满的一种尺度。

HashMap常用方法：
public V put(K key,V value)
将键/值对数据存放到散列映射中，返回键所对应的值，key值重复，则会用新的value替换旧的值，并返回旧的值。
public void clear() 
清空散列映射。
public Object clone()  
返回当前散列映射的一个克隆。
public boolean containsKey(Object key) 
散列映射是否包含key指定的键，所在的“键/值” 。 
public boolean containsValue(Object value) 
如果散列映射有“键/值”对的值是参数指定的值。
public V get(Object key) 
返回散列映射中使用key做键的“键/值”对中的值。
public boolean isEmpty()  
如果散列映射不含任何“键/值”对，方法返回true，否则返回false。
public V remove(Object key) 
删除散列映射中键为参数指定的“键/值”对，并返回键对应的值。
public int size() 
返回散列映射的大小，即散列映射中“键/值”对的数目。
Set<Map.Entry<K,V>> entrySet()
返回此HashMap中包含的所有映射对，组成的Set集合。
Set<K> keySet()
返回此HashMap中包含的所有的键，组成的Set集合。
Collection<V> values()
返回此HashMap中包含的所有的值，组成的Collection集合。 


HashMap的遍历：
（1）先将HashMap对象转换成Collection对象。
Set<Map.Entry<K,V>> entrySet()
返回此HashMap中包含的所有映射对，组成的Set集合。
Set<K> keySet()
返回此HashMap中包含的所有的键，组成的Set集合。
Collection<V> values()
返回此HashMap中包含的所有的值，组成的Collection集合。 
（2）使用Collection对象的iterator()方法获取迭代器。
（3）使用迭代器进行遍历。















































