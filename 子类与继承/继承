多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那个类即可。

多个类可以称为子类，单独这个类称为父类、超类或者基类。

子类可以直接访问父类中的非私有的属性和行为。

通过 extends 关键字让类与类之间产生继承关系。
一个类只能有一个父类，不可以有多个父类
Java支持多层（重）继承(继承体系

implements关键字
使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）。

构造器
子类是不继承父类的构造器（构造方法或者构造函数）的，它只是调用（隐式或显式）。如果父类的构造器带有参数，则必须在子类的构造器中显式地通过 super 关键字调用父类的构造器并配以适当的参数列表。

如果父类构造器没有参数，则在子类的构造器中不需要使用 super 关键字调用父类构造器，系统会自动调用父类的无参构造器。

多态
概念：

对象在不同时刻表现出来的不同状态。

多态的前提：

要有继承或者实现关系。
要有方法的重写。
要有父类引用指向子类对象。
程序中的体现：
父类或者接口的引用指向或者接收自己的子类对象。

好处和作用：
多态的存在提高了程序的扩展性和后期可维护性。

弊端:
父类调用的时候只能调用父类里的方法，不能调用子类的特有方法，因为你并不清楚将来会有什么样的子类继承你。

多态的成员特点：

成员变量：编译时期：看引用型变量所属的类中是否有所调用的变量；
运行时期：也是看引用型变量所属的类是否有调用的变量。
成员变量无论编译还是运行都看引用型变量所属的类，简单记成员变量，编译和运行都看等号左边。
成员方法：编译时期：要查看引用变量所属的类中是否有所调用的成员；
运行时期：要查看对象所属的类中是否有所调用的成员。如果父子出现同名的方法,会运行子类中的方法,因为方法有覆盖的特性。
编译看左边运行看右边。
静态方法:编译时期：看的引用型变量所属的类中是否有所调用的变量；
运行时期：也是看引用型变量所属的类是否有调用的变量。
编译和运行都看等号左边。
一定不能够将父类的对象转换成子类类型！

父类的引用指向子类对象，该引用可以被提升，也可以被强制转换。

多态自始至终都是子类对象在变化！